//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Monitor.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Record", Namespace="http://schemas.datacontract.org/2004/07/Monitor")]
    [System.SerializableAttribute()]
    public partial class Record : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> INField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> IaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> IbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> IcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> IgfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Address {
            get {
                return this.AddressField;
            }
            set {
                if ((this.AddressField.Equals(value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> IN {
            get {
                return this.INField;
            }
            set {
                if ((this.INField.Equals(value) != true)) {
                    this.INField = value;
                    this.RaisePropertyChanged("IN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Ia {
            get {
                return this.IaField;
            }
            set {
                if ((this.IaField.Equals(value) != true)) {
                    this.IaField = value;
                    this.RaisePropertyChanged("Ia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Ib {
            get {
                return this.IbField;
            }
            set {
                if ((this.IbField.Equals(value) != true)) {
                    this.IbField = value;
                    this.RaisePropertyChanged("Ib");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Ic {
            get {
                return this.IcField;
            }
            set {
                if ((this.IcField.Equals(value) != true)) {
                    this.IcField = value;
                    this.RaisePropertyChanged("Ic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Igf {
            get {
                return this.IgfField;
            }
            set {
                if ((this.IgfField.Equals(value) != true)) {
                    this.IgfField = value;
                    this.RaisePropertyChanged("Igf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEDSService")]
    public interface IEDSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/UpdateDevice", ReplyAction="http://tempuri.org/IEDSService/UpdateDeviceResponse")]
        byte[] UpdateDevice(byte address, int zoneIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/UpdateDevice", ReplyAction="http://tempuri.org/IEDSService/UpdateDeviceResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateDeviceAsync(byte address, int zoneIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/RemoteControl", ReplyAction="http://tempuri.org/IEDSService/RemoteControlResponse")]
        byte[] RemoteControl(byte[] snd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/RemoteControl", ReplyAction="http://tempuri.org/IEDSService/RemoteControlResponse")]
        System.Threading.Tasks.Task<byte[]> RemoteControlAsync(byte[] snd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryData", ReplyAction="http://tempuri.org/IEDSService/QueryDataResponse")]
        Monitor.ServiceReference1.Record[] QueryData(byte address, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryData", ReplyAction="http://tempuri.org/IEDSService/QueryDataResponse")]
        System.Threading.Tasks.Task<Monitor.ServiceReference1.Record[]> QueryDataAsync(byte address, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryTrip", ReplyAction="http://tempuri.org/IEDSService/QueryTripResponse")]
        EDSLot.Trip[] QueryTrip(byte address, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryTrip", ReplyAction="http://tempuri.org/IEDSService/QueryTripResponse")]
        System.Threading.Tasks.Task<EDSLot.Trip[]> QueryTripAsync(byte address, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/ChangeSelAddress", ReplyAction="http://tempuri.org/IEDSService/ChangeSelAddressResponse")]
        void ChangeSelAddress(byte address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/ChangeSelAddress", ReplyAction="http://tempuri.org/IEDSService/ChangeSelAddressResponse")]
        System.Threading.Tasks.Task ChangeSelAddressAsync(byte address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/ChangeSelZone", ReplyAction="http://tempuri.org/IEDSService/ChangeSelZoneResponse")]
        void ChangeSelZone(byte zid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/ChangeSelZone", ReplyAction="http://tempuri.org/IEDSService/ChangeSelZoneResponse")]
        System.Threading.Tasks.Task ChangeSelZoneAsync(byte zid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryEnergy", ReplyAction="http://tempuri.org/IEDSService/QueryEnergyResponse")]
        EDSLot.Energy[] QueryEnergy(int[] addrs, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/QueryEnergy", ReplyAction="http://tempuri.org/IEDSService/QueryEnergyResponse")]
        System.Threading.Tasks.Task<EDSLot.Energy[]> QueryEnergyAsync(int[] addrs, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/GetUpsState", ReplyAction="http://tempuri.org/IEDSService/GetUpsStateResponse")]
        string GetUpsState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDSService/GetUpsState", ReplyAction="http://tempuri.org/IEDSService/GetUpsStateResponse")]
        System.Threading.Tasks.Task<string> GetUpsStateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEDSServiceChannel : Monitor.ServiceReference1.IEDSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EDSServiceClient : System.ServiceModel.ClientBase<Monitor.ServiceReference1.IEDSService>, Monitor.ServiceReference1.IEDSService {
        
        public EDSServiceClient() {
        }
        
        public EDSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EDSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EDSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EDSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] UpdateDevice(byte address, int zoneIndex) {
            return base.Channel.UpdateDevice(address, zoneIndex);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateDeviceAsync(byte address, int zoneIndex) {
            return base.Channel.UpdateDeviceAsync(address, zoneIndex);
        }
        
        public byte[] RemoteControl(byte[] snd) {
            return base.Channel.RemoteControl(snd);
        }
        
        public System.Threading.Tasks.Task<byte[]> RemoteControlAsync(byte[] snd) {
            return base.Channel.RemoteControlAsync(snd);
        }
        
        public Monitor.ServiceReference1.Record[] QueryData(byte address, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryData(address, start, end);
        }
        
        public System.Threading.Tasks.Task<Monitor.ServiceReference1.Record[]> QueryDataAsync(byte address, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryDataAsync(address, start, end);
        }
        
        public EDSLot.Trip[] QueryTrip(byte address, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryTrip(address, start, end);
        }
        
        public System.Threading.Tasks.Task<EDSLot.Trip[]> QueryTripAsync(byte address, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryTripAsync(address, start, end);
        }
        
        public void ChangeSelAddress(byte address) {
            base.Channel.ChangeSelAddress(address);
        }
        
        public System.Threading.Tasks.Task ChangeSelAddressAsync(byte address) {
            return base.Channel.ChangeSelAddressAsync(address);
        }
        
        public void ChangeSelZone(byte zid) {
            base.Channel.ChangeSelZone(zid);
        }
        
        public System.Threading.Tasks.Task ChangeSelZoneAsync(byte zid) {
            return base.Channel.ChangeSelZoneAsync(zid);
        }
        
        public EDSLot.Energy[] QueryEnergy(int[] addrs, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryEnergy(addrs, start, end);
        }
        
        public System.Threading.Tasks.Task<EDSLot.Energy[]> QueryEnergyAsync(int[] addrs, System.DateTime start, System.DateTime end) {
            return base.Channel.QueryEnergyAsync(addrs, start, end);
        }
        
        public string GetUpsState() {
            return base.Channel.GetUpsState();
        }
        
        public System.Threading.Tasks.Task<string> GetUpsStateAsync() {
            return base.Channel.GetUpsStateAsync();
        }
    }
}
